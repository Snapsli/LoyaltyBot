import React, { useState, useEffect } from 'react';
import '../styles/SbisPanel.css';

const SbisPanel = ({ sessionToken, onBack }) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [exportType, setExportType] = useState('sales');
  const [exportFormat, setExportFormat] = useState('csv');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [selectedBarId, setSelectedBarId] = useState('');
  const [analytics, setAnalytics] = useState(null);

  const exportTypes = [
    { value: 'sales', label: '–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', description: '–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π' },
    { value: 'financial', label: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç', description: '–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –±–∞—Ä–∞–º' },
    { value: 'customers', label: '–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º', description: '–ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤' },
    { value: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç', description: '–¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã' }
  ];

  const exportFormats = [
    { value: 'csv', label: 'CSV', description: '–î–ª—è Excel –∏ –°–ë–ò–°' },
    { value: 'json', label: 'JSON', description: '–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' },
    { value: 'xml', label: 'XML', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' }
  ];

  const barOptions = [
    { id: '', name: '–í—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è' },
    { id: '1', name: '–ö—É–ª—å—Ç—É—Ä–∞' },
    { id: '2', name: 'Caballitos Mexican Bar' },
    { id: '3', name: 'Fonoteca - Listening Bar' },
    { id: '4', name: 'Tchaikovsky' }
  ];

  useEffect(() => {
    loadAnalytics();
  }, []);

  const loadAnalytics = async () => {
    try {
      setLoading(true);
      const response = await fetch(
        `${process.env.REACT_APP_API_URL || '/api'}/admin/stats/users`,
        {
          headers: {
            'x-session-token': sessionToken
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        setAnalytics(data);
      }
    } catch (err) {
      console.error('Error loading analytics:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async () => {
    try {
      setLoading(true);
      setError('');

      const params = new URLSearchParams();
      params.append('type', exportType);
      params.append('format', exportFormat);
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      if (selectedBarId) params.append('barId', selectedBarId);

      const response = await fetch(
        `${process.env.REACT_APP_API_URL || '/api'}/admin/export/sbis?${params.toString()}`,
        {
          headers: {
            'x-session-token': sessionToken
          }
        }
      );

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
      }

      // Create download link
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = response.headers.get('content-disposition')?.split('filename=')[1]?.replace(/"/g, '') || 'sbis_export';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSbisWebsite = () => {
    window.open('https://sbis.ru/', '_blank');
  };

  const handleSbisApp = () => {
    // Deep link to SBIS app (if available)
    const sbisAppUrl = 'sbis://';
    window.location.href = sbisAppUrl;
  };

  const getExportDescription = () => {
    const type = exportTypes.find(t => t.value === exportType);
    return type ? type.description : '';
  };

  return (
    <div className="sbis-panel">
      <div className="sbis-header">
        <button className="back-button" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <h1>üìä –°–ë–ò–° - –°–∏—Å—Ç–µ–º–∞ –ë–∏–∑–Ω–µ—Å –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h1>
      </div>

      <div className="sbis-content">
        {/* Quick Actions */}
        <div className="sbis-section">
          <h2>üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="quick-actions">
            <button onClick={handleSbisWebsite} className="action-btn website">
              üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –°–ë–ò–°
            </button>
            <button onClick={handleSbisApp} className="action-btn app">
              üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–ë–ò–°
            </button>
          </div>
        </div>

        {/* Export Configuration */}
        <div className="sbis-section">
          <h2>üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–ë–ò–°</h2>
          
          <div className="export-config">
            <div className="config-row">
              <div className="config-group">
                <label>–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</label>
                <select 
                  value={exportType} 
                  onChange={(e) => setExportType(e.target.value)}
                  className="config-select"
                >
                  {exportTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.label}
                    </option>
                  ))}
                </select>
                <small className="description">{getExportDescription()}</small>
              </div>

              <div className="config-group">
                <label>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</label>
                <select 
                  value={exportFormat} 
                  onChange={(e) => setExportFormat(e.target.value)}
                  className="config-select"
                >
                  {exportFormats.map(format => (
                    <option key={format.value} value={format.value}>
                      {format.label}
                    </option>
                  ))}
                </select>
                <small className="description">
                  {exportFormats.find(f => f.value === exportFormat)?.description}
                </small>
              </div>
            </div>

            <div className="config-row">
              <div className="config-group">
                <label>–ó–∞–≤–µ–¥–µ–Ω–∏–µ:</label>
                <select 
                  value={selectedBarId} 
                  onChange={(e) => setSelectedBarId(e.target.value)}
                  className="config-select"
                >
                  {barOptions.map(bar => (
                    <option key={bar.id} value={bar.id}>
                      {bar.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="config-group">
                <label>–ü–µ—Ä–∏–æ–¥ —Å:</label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="config-input"
                />
              </div>

              <div className="config-group">
                <label>–ü–µ—Ä–∏–æ–¥ –ø–æ:</label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="config-input"
                />
              </div>
            </div>

            <button 
              onClick={handleExport} 
              disabled={loading}
              className="export-btn"
            >
              {loading ? 'üîÑ –≠–∫—Å–ø–æ—Ä—Ç...' : 'üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </div>
        </div>

        {/* Analytics Dashboard */}
        {analytics && (
          <div className="sbis-section">
            <h2>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –°–ë–ò–°</h2>
            
            <div className="analytics-grid">
              <div className="analytics-card">
                <div className="card-icon">üë•</div>
                <div className="card-content">
                  <h3>{analytics.summary?.totalUsers || 0}</h3>
                  <p>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
                </div>
              </div>

              <div className="analytics-card">
                <div className="card-icon">üí∞</div>
                <div className="card-content">
                  <h3>{analytics.summary?.totalPointsInSystem?.toLocaleString() || 0}</h3>
                  <p>–ë–∞–ª–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</p>
                </div>
              </div>

              <div className="analytics-card">
                <div className="card-icon">üìä</div>
                <div className="card-content">
                  <h3>{analytics.summary?.avgPointsPerUser || 0}</h3>
                  <p>–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞</p>
                </div>
              </div>

              <div className="analytics-card">
                <div className="card-icon">üÜï</div>
                <div className="card-content">
                  <h3>{analytics.summary?.newUsers || 0}</h3>
                  <p>–ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π</p>
                </div>
              </div>
            </div>

            {analytics.barDistribution && analytics.barDistribution.length > 0 && (
              <div className="bar-analytics">
                <h3>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º</h3>
                <div className="bar-chart">
                  {analytics.barDistribution.map((bar, index) => (
                    <div key={index} className="bar-item">
                      <div className="bar-info">
                        <span className="bar-name">{bar.barName}</span>
                        <span className="bar-stats">
                          {bar.userCount} –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Ä¢ {bar.transactionCount} –æ–ø–µ—Ä–∞—Ü–∏–π
                        </span>
                      </div>
                      <div className="bar-progress">
                        <div 
                          className="progress-fill"
                          style={{
                            width: `${(bar.userCount / Math.max(...analytics.barDistribution.map(b => b.userCount), 1)) * 100}%`
                          }}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Integration Instructions */}
        <div className="sbis-section">
          <h2>üîó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
          
          <div className="integration-steps">
            <div className="step">
              <div className="step-number">1</div>
              <div className="step-content">
                <h4>–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ API –°–ë–ò–°</h4>
                <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –°–ë–ò–° –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</p>
              </div>
            </div>

            <div className="step">
              <div className="step-number">2</div>
              <div className="step-content">
                <h4>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook</h4>
                <p>–°–æ–∑–¥–∞–π—Ç–µ endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –°–ë–ò–°</p>
              </div>
            </div>

            <div className="step">
              <div className="step-number">3</div>
              <div className="step-content">
                <h4>–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ API</h4>
                <p>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –°–ë–ò–°</p>
              </div>
            </div>

            <div className="step">
              <div className="step-number">4</div>
              <div className="step-content">
                <h4>–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é</h4>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö</p>
              </div>
            </div>
          </div>

          <div className="integration-links">
            <a href="https://sbis.ru/help" target="_blank" rel="noopener noreferrer" className="link-btn">
              üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –°–ë–ò–°
            </a>
            <a href="https://sbis.ru/api" target="_blank" rel="noopener noreferrer" className="link-btn">
              üîå API –°–ë–ò–°
            </a>
            <a href="https://sbis.ru/support" target="_blank" rel="noopener noreferrer" className="link-btn">
              üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞
            </a>
          </div>
        </div>
      </div>

      {error && (
        <div className="sbis-error">
          <p>‚ùå {error}</p>
        </div>
      )}
    </div>
  );
};

export default SbisPanel; 