import React, { useEffect, useState } from 'react';
import QRCode from 'react-qr-code';

const EarnQRModal = ({ userId, barId, barName, onClose }) => {
  const [qrData, setQrData] = useState('');
  const [isExpired, setIsExpired] = useState(false);
  const [timeLeft, setTimeLeft] = useState(300); // 5 –º–∏–Ω—É—Ç
  const [isProcessing, setIsProcessing] = useState(false);
  const [earnResult, setEarnResult] = useState(null);
  const [purchaseAmount, setPurchaseAmount] = useState('');
  const [barSettings, setBarSettings] = useState(null);
  const [loadingSettings, setLoadingSettings] = useState(true);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
    loadBarSettings();
  }, [barId]);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
  useEffect(() => {
    const interval = setInterval(() => {
      if (!loadingSettings) {
        loadBarSettings();
      }
    }, 10000);

    return () => clearInterval(interval);
  }, [loadingSettings]);

  useEffect(() => {
    if (barSettings) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const earnData = {
        type: 'earn', // —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ
        userId: userId,
        barId: barId,
        barName: barName,
        timestamp: Date.now(),
        expiresAt: Date.now() + (5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
      };

      setQrData(JSON.stringify(earnData));
    }
  }, [userId, barId, barName, barSettings]);

  const loadBarSettings = async () => {
    try {
      setLoadingSettings(true);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ - –¥–æ–±–∞–≤–ª—è–µ–º timestamp –∫ URL
      const timestamp = new Date().getTime();
      const response = await fetch(`${process.env.REACT_APP_API_URL || '/api'}/points-settings?t=${timestamp}`, {
        headers: {
          'x-session-token': localStorage.getItem('loyalty_token')
        }
      });

      if (response.ok) {
        const allSettings = await response.json();
        const currentBarSettings = allSettings[barId.toString()];
        setBarSettings(currentBarSettings);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ development
        if (process.env.NODE_ENV === 'development') {
          console.log('üîß Loaded bar settings for bar', barId, ':', currentBarSettings);
          console.log('üìä All settings:', allSettings);
        }
      } else {
        console.error('Failed to load bar settings');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setBarSettings({ pointsPerRuble: 0.01, minPurchase: 0, isActive: true });
      }
    } catch (error) {
      console.error('Error loading bar settings:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setBarSettings({ pointsPerRuble: 0.01, minPurchase: 0, isActive: true });
    } finally {
      setLoadingSettings(false);
    }
  };

  useEffect(() => {
    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          setIsExpired(true);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [onClose]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const generateNewQR = () => {
    setTimeLeft(300);
    setIsExpired(false);
    setEarnResult(null);
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ QR –∫–æ–¥–∞
    loadBarSettings();
    const earnData = {
      type: 'earn',
      userId: userId,
      barId: barId,
      barName: barName,
      timestamp: Date.now(),
      expiresAt: Date.now() + (5 * 60 * 1000)
    };
    setQrData(JSON.stringify(earnData));
  };

  const emulateEarnPoints = async () => {
    if (!purchaseAmount || isNaN(purchaseAmount) || Number(purchaseAmount) <= 0) {
      setEarnResult({
        success: false,
        message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏'
      });
      return;
    }

    try {
      setIsProcessing(true);
      
      const response = await fetch(`${process.env.REACT_APP_API_URL || '/api'}/dev/emulate-earn`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-session-token': localStorage.getItem('loyalty_token')
        },
        body: JSON.stringify({
          qrData: qrData,
          purchaseAmount: Number(purchaseAmount)
        })
      });

      const result = await response.json();

      if (response.ok) {
        setEarnResult({
          success: true,
          message: result.message,
          pointsEarned: result.transaction.pointsEarned,
          newTotalPoints: result.newTotalPoints
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
        const userData = JSON.parse(localStorage.getItem('loyalty_user') || '{}');
        if (userData.barPoints) {
          userData.barPoints[barId.toString()] = result.newTotalPoints;
          localStorage.setItem('loyalty_user', JSON.stringify(userData));
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        setTimeout(() => {
          onClose();
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
          window.location.reload();
        }, 3000);
      } else {
        setEarnResult({
          success: false,
          message: result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤'
        });
      }
    } catch (error) {
      console.error('Error emulating earn points:', error);
      setEarnResult({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="qr-modal-overlay" onClick={onClose}>
      <div className="qr-modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="qr-header">
          <h2 className="qr-title">QR-–∫–æ–¥ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤</h2>
          <button className="qr-close-button" onClick={onClose}>‚úï</button>
        </div>
        
        <div className="qr-item-info">
          <h3 className="qr-item-name">–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤</h3>
          <p className="qr-bar-name">–ó–∞–≤–µ–¥–µ–Ω–∏–µ: {barName}</p>
          {loadingSettings ? (
            <p className="qr-earn-description">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
          ) : barSettings && !barSettings.isActive ? (
            <p className="qr-earn-description" style={{ color: '#dc3545' }}>
              ‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            </p>
          ) : barSettings ? (
            <div>
              <p className="qr-earn-description">
                –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –±–∞—Ä–º–µ–Ω—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
              </p>
                                            <div style={{ fontSize: '12px', color: '#666', textAlign: 'center', marginTop: '8px' }}>
                 <div>–ö—É—Ä—Å: {Math.round(1/barSettings.pointsPerRuble)} ‚ÇΩ = 1 –±–∞–ª–ª</div>
                 {Number(barSettings.minPurchase) > 0 && (
                   <div>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {Number(barSettings.minPurchase)} ‚ÇΩ</div>
                 )}
               </div>
            </div>
          ) : (
            <p className="qr-earn-description">
              –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –±–∞—Ä–º–µ–Ω—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
            </p>
          )}
        </div>

        <div className="qr-code-container">
          {loadingSettings ? (
            <div style={{ textAlign: 'center', padding: '40px' }}>
              <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
          ) : barSettings && !barSettings.isActive ? (
            <div className="qr-expired">
              <div className="expired-icon">‚ö†Ô∏è</div>
              <h3 className="expired-title">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞</h3>
              <p className="expired-message">
                –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
              </p>
            </div>
          ) : !isExpired ? (
            <>
              <QRCode
                value={qrData}
                size={256}
                style={{ height: "auto", maxWidth: "100%", width: "100%" }}
                viewBox={`0 0 256 256`}
              />
              <div className="qr-timer">
                <span className="timer-label">QR-–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:</span>
                <span className={`timer-value ${timeLeft < 60 ? 'warning' : ''}`}>
                  {formatTime(timeLeft)}
                </span>
              </div>
            </>
          ) : (
            <div className="qr-expired">
              <div className="expired-icon">‚è∞</div>
              <h3 className="expired-title">QR-–∫–æ–¥ –∏—Å—Ç–µ–∫</h3>
              <p className="expired-message">
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π QR-–∫–æ–¥ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
              </p>
              <button 
                className="generate-new-qr-btn"
                onClick={generateNewQR}
              >
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥
              </button>
            </div>
          )}
        </div>

        {barSettings && barSettings.isActive && (
          <div className="qr-instructions">
            <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
            <ol>
              <li>–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –±–∞—Ä–º–µ–Ω—É</li>
              <li>–û–ø–ª–∞—Ç–∏—Ç–µ –≤–∞—à —Å—á–µ—Ç</li>
              <li>–ë–∞—Ä–º–µ–Ω –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤</li>
              <li>–ë–∞–ª–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á–µ—Ç!</li>
            </ol>
            <p style={{ fontSize: '12px', color: '#666', marginTop: '8px', textAlign: 'center' }}>
              {barSettings ? 
                `1 –±–∞–ª–ª = ${Math.round(1/barSettings.pointsPerRuble)} —Ä—É–±–ª–µ–π` : 
                '1 –±–∞–ª–ª = 100 —Ä—É–±–ª–µ–π'
              }
              {barSettings && Number(barSettings.minPurchase) > 0 && (
                <><br/>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {Number(barSettings.minPurchase)} ‚ÇΩ</>
              )}
            </p>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è */}
        {earnResult && (
          <div className={`purchase-result ${earnResult.success ? 'success' : 'error'}`}>
            <div className="result-icon">
              {earnResult.success ? '‚úÖ' : '‚ùå'}
            </div>
            <div className="result-message">{earnResult.message}</div>
            {earnResult.success && (
              <div className="earned-points">
                –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: +{earnResult.pointsEarned}<br/>
                –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏: {earnResult.newTotalPoints}
              </div>
            )}
          </div>
        )}

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤ development */}
        {process.env.NODE_ENV === 'development' && barSettings && (
          <div style={{ 
            background: '#f8f9fa', 
            border: '1px solid #dee2e6', 
            borderRadius: '4px', 
            padding: '10px', 
            marginBottom: '15px',
            fontSize: '12px'
          }}>
            <strong>üîß Debug (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ä–∞ {barId}):</strong>
            <div>pointsPerRuble: {barSettings.pointsPerRuble}</div>
            <div>minPurchase: {barSettings.minPurchase} (type: {typeof barSettings.minPurchase})</div>
            <div>isActive: {barSettings.isActive ? 'true' : 'false'}</div>
            <div>–ö—É—Ä—Å: {Math.round(1/barSettings.pointsPerRuble)} ‚ÇΩ = 1 –±–∞–ª–ª</div>
          </div>
        )}

        <div className="qr-actions">
          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development */}
          {process.env.NODE_ENV === 'development' && (
            <div style={{ marginBottom: '10px' }}>
              <button 
                onClick={loadBarSettings}
                disabled={loadingSettings}
                style={{ 
                  padding: '6px 12px', 
                  fontSize: '12px', 
                  marginRight: '5px',
                  background: '#17a2b8',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                {loadingSettings ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
              </button>
              <button 
                onClick={async () => {
                  try {
                    const response = await fetch(`${process.env.REACT_APP_API_URL || '/api'}/dev/points-settings-debug`);
                    const data = await response.json();
                    console.log('üîç DEBUG: Server settings state:', data);
                    alert(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(data.currentSettings, null, 2)}`);
                  } catch (error) {
                    console.error('Error fetching debug info:', error);
                  }
                }}
                style={{ 
                  padding: '6px 12px', 
                  fontSize: '12px',
                  background: '#ffc107',
                  color: 'black',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                üîç Debug —Å–µ—Ä–≤–µ—Ä
              </button>
            </div>
          )}
          
          {/* –≠–º—É–ª—è—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ development */}
          {process.env.NODE_ENV === 'development' && !earnResult && !isExpired && barSettings && barSettings.isActive && (
            <div className="earn-emulation">
              <h4 style={{ marginBottom: '10px', fontSize: '14px' }}>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏):</h4>
              <div style={{ display: 'flex', gap: '10px', alignItems: 'center', marginBottom: '10px' }}>
                <input
                  type="number"
                  placeholder="–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ (‚ÇΩ)"
                  value={purchaseAmount}
                  onChange={(e) => setPurchaseAmount(e.target.value)}
                  style={{
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    fontSize: '14px',
                    width: '150px'
                  }}
                />
                <button
                  className="emulate-purchase-btn"
                  onClick={emulateEarnPoints}
                  disabled={isProcessing}
                  style={{ padding: '8px 16px', fontSize: '14px' }}
                >
                  {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã'}
                </button>
              </div>
            </div>
          )}
          
          <button 
            className="qr-cancel-btn"
            onClick={onClose}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default EarnQRModal; 