import React, { useEffect, useState } from 'react';
import QRCode from 'react-qr-code';

const QRModal = ({ userId, barId, barName, itemId, itemName, itemPrice, onClose }) => {
  const [qrData, setQrData] = useState('');
  const [isExpired, setIsExpired] = useState(false);
  const [timeLeft, setTimeLeft] = useState(300); // 5 –º–∏–Ω—É—Ç
  const [isProcessing, setIsProcessing] = useState(false);
  const [purchaseResult, setPurchaseResult] = useState(null);

  useEffect(() => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
    const purchaseData = {
      type: 'spend', // —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–ø–∏—Å–∞–Ω–∏–µ
      userId: userId,
      barId: barId,
      itemId: itemId,
      itemName: itemName,
      itemPrice: itemPrice,
      timestamp: Date.now(),
      expiresAt: Date.now() + (5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
    };

    setQrData(JSON.stringify(purchaseData));
  }, [userId, barId, itemId, itemName, itemPrice]);

  useEffect(() => {
    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          setIsExpired(true);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [onClose]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const emulatePurchase = async () => {
    try {
      setIsProcessing(true);
      
      const response = await fetch(`${process.env.REACT_APP_API_URL || '/api'}/dev/emulate-purchase`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-session-token': localStorage.getItem('loyalty_token')
        },
        body: JSON.stringify({
          qrData: qrData
        })
      });

      const result = await response.json();

      if (response.ok) {
        setPurchaseResult({
          success: true,
          message: result.message,
          remainingPoints: result.remainingPoints
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
        const userData = JSON.parse(localStorage.getItem('loyalty_user') || '{}');
        if (userData.barPoints) {
          userData.barPoints[barId.toString()] = result.remainingPoints;
          localStorage.setItem('loyalty_user', JSON.stringify(userData));
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        setTimeout(() => {
          onClose();
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
          window.location.reload();
        }, 3000);
      } else {
        setPurchaseResult({
          success: false,
          message: result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏'
        });
      }
    } catch (error) {
      console.error('Error emulating purchase:', error);
      setPurchaseResult({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="qr-modal-overlay" onClick={onClose}>
      <div className="qr-modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="qr-header">
          <h2 className="qr-title">QR-–∫–æ–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</h2>
          <button className="qr-close-button" onClick={onClose}>‚úï</button>
        </div>
        
        <div className="qr-item-info">
          <h3 className="qr-item-name">{itemName}</h3>
          <p className="qr-item-price">{itemPrice} –±–∞–ª–ª–æ–≤</p>
          <p className="qr-bar-name">–ó–∞–≤–µ–¥–µ–Ω–∏–µ: {barName}</p>
        </div>

        <div className="qr-code-container">
          {!isExpired ? (
            <>
              <QRCode
                value={qrData}
                size={256}
                style={{ height: "auto", maxWidth: "100%", width: "100%" }}
                viewBox={`0 0 256 256`}
              />
              <div className="qr-timer">
                <span className="timer-label">QR-–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:</span>
                <span className={`timer-value ${timeLeft < 60 ? 'warning' : ''}`}>
                  {formatTime(timeLeft)}
                </span>
              </div>
            </>
          ) : (
            <div className="qr-expired">
              <div className="expired-icon">‚è∞</div>
              <h3 className="expired-title">QR-–∫–æ–¥ –∏—Å—Ç–µ–∫</h3>
              <p className="expired-message">
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π QR-–∫–æ–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
              </p>
              <button 
                className="generate-new-qr-btn"
                onClick={() => {
                  setTimeLeft(300);
                  setIsExpired(false);
                  const purchaseData = {
                    type: 'spend', // —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–ø–∏—Å–∞–Ω–∏–µ
                    userId: userId,
                    barId: barId,
                    itemId: itemId,
                    itemName: itemName,
                    itemPrice: itemPrice,
                    timestamp: Date.now(),
                    expiresAt: Date.now() + (5 * 60 * 1000)
                  };
                  setQrData(JSON.stringify(purchaseData));
                }}
              >
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥
              </button>
            </div>
          )}
        </div>

        <div className="qr-instructions">
          <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
          <ol>
            <li>–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –±–∞—Ä–º–µ–Ω—É</li>
            <li>–ë–∞—Ä–º–µ–Ω –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ —Å–≤–æ–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º</li>
            <li>–ë–∞–ª–ª—ã —Å–ø–∏—à—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
            <li>–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑!</li>
          </ol>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ */}
        {purchaseResult && (
          <div className={`purchase-result ${purchaseResult.success ? 'success' : 'error'}`}>
            <div className="result-icon">
              {purchaseResult.success ? '‚úÖ' : '‚ùå'}
            </div>
            <div className="result-message">{purchaseResult.message}</div>
            {purchaseResult.success && (
              <div className="remaining-points">
                –û—Å—Ç–∞–ª–æ—Å—å –±–∞–ª–ª–æ–≤: {purchaseResult.remainingPoints}
              </div>
            )}
          </div>
        )}

        <div className="qr-actions">
          {/* –ö–Ω–æ–ø–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ development */}
          {process.env.NODE_ENV === 'development' && !purchaseResult && !isExpired && (
            <button 
              className="emulate-purchase-btn" 
              onClick={emulatePurchase}
              disabled={isProcessing}
            >
              {isProcessing ? '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...' : 'ü§ñ –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É'}
            </button>
          )}
          
          <button 
            className="qr-cancel-btn" 
            onClick={onClose}
            disabled={isProcessing}
          >
            {purchaseResult?.success ? '–ó–∞–∫—Ä—ã—Ç—å' : '–û—Ç–º–µ–Ω–∏—Ç—å'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default QRModal; 